doctype html
html
    head
        title #{title}

        meta(charset="utf-8")
        meta(name="viewport" content="width=device-width, initial-scale=1")

        each cssFilePath in cssFilesToInject
            link(rel="stylesheet", href="/#{ cssFilePath }")
    body
        .navbar.navbar-default.navbar-fixed-top.z-depth-2
            .container
                .navbar-header
                    a.navbar-brand.hidden-xs(href="/")
                        img(src="/resources/core/images/DOME_Icon_White.png")
                .navbar-text #{title}

                a.btn.btn-warning.navbar-btn.navbar-right.z-depth-1(href="/")
                    span.item-text Back
        .container.main-container
            .row
                h2 Please authenticate using the QR in the popup

        hr.fiware-line
    script.
        const popupCenter = ({url, title, w, h}) => {
            // Fixes dual-screen position                             Most browsers      Firefox
            const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;
            const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;

            const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;
            const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;

            const systemZoom = width / window.screen.availWidth;
            const left = (width - w) / 2 / systemZoom + dualScreenLeft
            const top = (height - h) / 2 / systemZoom + dualScreenTop
            const newWindow = window.open(url, title,
                `
              scrollbars=yes,
              width=${w / systemZoom},
              height=${h / systemZoom},
              top=${top},
              left=${left}
              `
            )

            if (window && window.focus) {
                newWindow.focus();
            }
            return newWindow;
        }

        function openWindow() {
            const url = '#{verifierQRCodeURL}?#{statePair}&#{callbackURLPair}&#{clientIDPair}'
            console.log(url)
            return popupCenter({url: url, title: 'Scan QR code', w: 500, h: 500});
        }

        let thePopup = openWindow();
        setInterval(pollServer, 1000, 'nonce');
        let cbTimeout = setTimeout(triggerCallback, 15000)

        async function pollServer() {
            const referrer = document.referrer;
            let referrerDomain = null
            let path = null

            // Check if the referrer is not empty
            if (referrer) {
                // Create a new URL object based on the referrer
                const referrerUrl = new URL(referrer);

                // Get the domain of the referrer
                referrerDomain = referrerUrl.protocol + '//' + referrerUrl.hostname + (referrerUrl.port ? ':' + referrerUrl.port : '');
                path = referrerUrl.pathname
                console.log("Referrer Domain: ", referrerDomain);
            } else {
                console.log("No referrer data available");
            }

            try {
                const response = await fetch('#{pollURL}?#{statePair}')
                if (response.status === 400 || response.status === 500) {
                    location.replace('/')
                    return
                } else if (response.status === 401) {
                    return
                }
                clearTimeout(cbTimeout)
                thePopup.close()
            } catch (error) {
                console.log(error)
            }

            // Login correct, redirect to the referrer
            const hostname = window.location.hostname;
            // Get the port of the current page
            const port = window.location.port;
            const proto = window.location.protocol
            const hostnameWithPort = proto + '//' + hostname + (port ? ':' + port : '');
            if (referrerDomain != null && referrerDomain != hostnameWithPort) {
                location.replace(referrerDomain)
            } else if (path != null){
                //location.replace(path)
                const accessToken = 'eyJhbGciOiJFUzI1NiIsImtpZCI6ImU4bmRaY01hcUt1Z0kwRkxUUmZUX0xNTWM4WUI1cEt5RXZGZkVMc0VyTjgiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOlsiZG9tZS1tYXJrZXRwbGFjZS5vcmciXSwiY2xpZW50X2lkIjoiZGlkOndlYjpkb21lLW1hcmtldHBsYWNlLm9yZyIsImV4cCI6MTcwNDk3NTk5OSwiaXNzIjoiZGlkOndlYjpkb21lLW1hcmtldHBsYWNlLm9yZyIsImtpZCI6ImU4bmRaY01hcUt1Z0kwRkxUUmZUX0xNTWM4WUI1cEt5RXZGZkVMc0VyTjgiLCJzdWIiOiJkaWQ6bXk6d2FsbGV0IiwidmVyaWZpYWJsZUNyZWRlbnRpYWwiOnsiQGNvbnRleHQiOlsiaHR0cHM6Ly93d3cudzMub3JnLzIwMTgvY3JlZGVudGlhbHMvdjEiLCJodHRwczovL3czaWQub3JnL3NlY3VyaXR5L3N1aXRlcy9qd3MtMjAyMC92MSJdLCJjcmVkZW50aWFsU2NoZW1hIjp7ImlkIjoiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0ZJV0FSRS1PcHMvdGVjaC14LWNoYWxsZW5nZS9tYWluL3NjaGVtYS5qc29uIiwidHlwZSI6IkZ1bGxKc29uU2NoZW1hVmFsaWRhdG9yMjAyMSJ9LCJjcmVkZW50aWFsU3ViamVjdCI6eyJmYW1pbHlOYW1lIjoiVXNlciIsImZpcnN0TmFtZSI6IkFkbWluIiwiaWQiOiI2NGU5ZmJjNy00NGQ3LTQxMGQtYTllNS1hNDQ3MjFjNGQwYmUiLCJyb2xlcyI6W3sibmFtZXMiOlsiYWRtaW4iXSwidGFyZ2V0IjoiZGlkOndlYjpkb21lLW1hcmtldHBsYWNlLm9yZyJ9XSwidHlwZSI6Imd4Ok5hdHVyYWxQYXJ0aWNpcGFudCJ9LCJpZCI6InVybjp1dWlkOmI2MWVmNzUxLTVkZmUtNDVjOC04Y2YzLTNlMDQ1ZmY4MzMzYyIsImlzc3VhbmNlRGF0ZSI6IjIwMjQtMDEtMDlUMTA6MTI6NTRaIiwiaXNzdWVkIjoiMjAyNC0wMS0wOVQxMDoxMjo1NFoiLCJpc3N1ZXIiOiJkaWQ6d2ViOmRvbWUtbWFya2V0cGxhY2Uub3JnIiwicHJvb2YiOnsiY3JlYXRlZCI6IjIwMjQtMDEtMDlUMTA6MTI6NTRaIiwiY3JlYXRvciI6ImRpZDp3ZWI6ZG9tZS1tYXJrZXRwbGFjZS5vcmciLCJqd3MiOiJleUppTmpRaU9tWmhiSE5sTENKamNtbDBJanBiSW1JMk5DSmRMQ0poYkdjaU9pSkZaRVJUUVNKOS4udDYyU1M4Zm1jZlpKMXo2dGc1Y283Wkd3UXZSUEFjOXhkam0zVElEem40Wlp3Tk1DeG1ZSTRnWkpUeGtmdFV0cWlnTklFNHpLaVZEcDlOeEFyS2lKQ2ciLCJ0eXBlIjoiSnNvbldlYlNpZ25hdHVyZTIwMjAiLCJ2ZXJpZmljYXRpb25NZXRob2QiOiJkaWQ6d2ViOmRvbWUtbWFya2V0cGxhY2Uub3JnI2Q2NjUzY2I1Nzk0MjRjMzg5YjU2ZTFhZjYxMTEwZTAzIn0sInR5cGUiOlsiVmVyaWZpYWJsZUNyZWRlbnRpYWwiLCJMZWdhbFBlcnNvbkNyZWRlbnRpYWwiXSwidmFsaWRGcm9tIjoiMjAyNC0wMS0wOVQxMDoxMjo1NFoifX0.CdxXp4TMH4C6Ki--jgpn-SCH0XFnX4R8vxuYos9ZaljxmlLMUjXFRVhGJfJOnGrn9UF0s1O_Xjoc4gmcpO8RHA'
                location.replace(`/gui/dashboard?token=${accessToken}`)
            } else {
                location.replace('/')
            }
        }

        async function triggerCallback() {
            console.log('Trigger default callback')
            try {
                await fetch('/auth/vc/callback?#{statePair}&code=test')
            } catch (error) {
                console.log(error)
            }
        }